name: Optimize Userscripts

on:
  push:
    branches: [main]
    paths:
      - 'userscripts/**'
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 0 * * 1'  # Monday at 00:00 UTC
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild all scripts'
        required: false
        default: 'false'
      fetch_updates:
        description: 'Fetch updates from sources'
        required: false
        default: 'false'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v6
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm i -g esbuild >/dev/null
        sudo apt-get -qq update
        sudo apt-get -qq install -y parallel curl >/dev/null
        curl -sLO https://github.com/sharkdp/fd/releases/download/v9.0.0/fd-musl_9.0.0_amd64.deb
        sudo dpkg -i fd-musl_9.0.0_amd64.deb >/dev/null 2>&1

    - name: Detect unoptimized scripts
      id: detect
      run: |
        mkdir -p userscripts dist
        unoptimized=false
        # Use bash arrays for file collection
        mapfile -t scripts < <(find userscripts -name "*.js" -type f 2>/dev/null || true)
        for f in "${scripts[@]}"; do
          [[ -f "$f" ]] || continue
          fname=$(basename "$f")
          if [[ ! -f "dist/$fname" ]]; then
            echo "::notice::Detected new file: $fname"
            unoptimized=true
          elif [[ "$f" -nt "dist/$fname" ]]; then
            echo "::notice::Detected modified file: $fname"
            unoptimized=true
          fi
        done
        # List file check (bash-native test)
        if [[ -f "List" ]] && { [[ ! -f "dist/README.md" ]] || [[ "List" -nt "dist/README.md" ]]; }; then
          echo "::notice::List file changed"
          unoptimized=true
        fi
        # Input handling
        [[ "${{ github.event.inputs.force_rebuild }}" == "true" ]] && {
          echo "::notice::Force rebuild requested"
          unoptimized=true
        }
        echo "unoptimized=$unoptimized" >> $GITHUB_OUTPUT

    - name: Fetch script updates
      if: github.event_name == 'schedule' || github.event.inputs.fetch_updates == 'true'
      run: |
        [[ -f "List" ]] || exit 0
        mkdir -p userscripts
        # Use while read for efficient iteration
        grep -o 'https\?://[^ "]*\.user\.js' List | while read -r url; do
          filename=$(basename "$url" | tr -cd '[:alnum:]._-')
          echo "::notice::Updating $filename"
          curl -sL -A "Mozilla/5.0 Firefox/124.0" -o "userscripts/$filename" "$url"
        done
        echo "unoptimized=true" >> $GITHUB_OUTPUT

    - name: Build scripts
      if: steps.detect.outputs.unoptimized == 'true'
      run: |
        chmod +x build-userscripts.sh
        ./build-userscripts.sh

    - name: Commit and push changes
      if: steps.detect.outputs.unoptimized == 'true' && github.event_name != 'pull_request'
      run: |
        git config --local user.email "actions@github.com"
        git config --local user.name "GitHub Actions"
        git add dist/
        git commit -m "Auto-optimize userscripts [skip ci]" || echo "No changes to commit"
        git push
